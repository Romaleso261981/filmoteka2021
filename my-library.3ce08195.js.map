{"mappings":"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","sources":["src/my-library.js"],"sourcesContent":["// import './css/styles.css';\n\nimport Notiflix from 'notiflix';\n\n//! Импорт класса ThemoviedbApiService с ./js/get-refs.js\nimport ThemoviedbApiService from './js/api-themoviedb.js';\n\n//! Импорт всех ссылок с ./js/get-refs.js\nimport getRefs from './js/get-refs.js';\n\n//! Импорт класса LoadMoreBtn Кнопки LOAD MORE\n// import LoadMoreBtn from './js/load-more-btn.js';\n\n//! Импорт массива объектов всех жанров из файла genres.js (ВРЕМЕННО. Надо сделать два запроса)\n// import { genres } from './js/genres.js';\n\n//?  Импорт spinner (Loader ==> isLoadin)\nimport spinner from './js/preLoader';\n\n\n\n//* +++++++++++++++++++++++++++++++++++ Импорты файлов ++++++++++++++++++++++++++++++++++++++++++++\n\n//! Создаем объект всех ссылок refs.*\nconst refs = getRefs();\n// console.log(\"refs:\", refs); //!\n\n//! Создаем экземпляр класса ThemoviedbApiService\nconst themoviedbApiService = new ThemoviedbApiService();\n\n//! Создаем экземпляр класса LoadMoreBtn = Кнопка LOAD MORE\n// const loadMoreBtn = new LoadMoreBtn({\n//   selector: '[data-action=\"load-more1\"]',\n//   hidden: true,\n// });\n\n\n\n\n\n//* +++++++++++++++++++++++++++++++ Создаем ВСЕХ слушателей +++++++++++++++++++++++++++++++++++++++++\n\n//!  Создаем слушателя событий на поле ввода данных - input form:\n// refs.searchForm.addEventListener('submit', onFormMoviesSearch); //! +-+-+-\n\n//!  Создаем слушателя событий на кнопке LOAD MORE:\n// loadMoreBtn.refs.button.addEventListener('click', onLoadMore);\n\n//! Создаем слушателя событий на кнопке HOME:\n// refs.homeBtn.addEventListener('click', onHome);\n\n//! Создаем слушателя событий на кнопке Filmoteka:\n// refs.filmotekaBtn.addEventListener('click', onHome);\n\n//! Создаем слушателя событий на кнопке MY LIBRARY:\nrefs.myLibraryBtn.addEventListener('click', onMyLibraryWatched);\n\n\n//! Создаем слушателя событий на <section class=\"section-hero\"> ==> на poster_path:\nrefs.movieDetails.addEventListener('click', onMovieDetails);\n\n//! +++++++++++++++++++ Создаем слушателей для МОДАЛКИ ++++++++++++++++++++++++\n// refs.openModalBtn.addEventListener('click', onOpenModal); //? ----- для тестирования\nrefs.closeModalBtn.addEventListener('click', onCloseModal);\nrefs.backdrop.addEventListener('click', onBackdropClick);\n\n//! +++++++++ Создаем слушателей на кнопках <ADD TO WATCHED> и <ADD TO QUEUE> для МОДАЛКИ ++++++++++++++\n// refs.watchedModal.addEventListener('click', onWatchedModal); //!!! +-+-+-+-\n// refs.queueModal.addEventListener('click', onQueueModal); //!!! +-+-+-+-\nconsole.log(\"Слушатели_refs.watchedModal:\", refs.watchedModal); //!\nconsole.log(\"Слушатели_refs.queueModal:\", refs.queueModal); //!\n//! Импортируем ГОТОВЫХ слушателей на кнопках <ADD TO WATCHED> и <ADD TO QUEUE> для МОДАЛКИ \n// import addIventListenerModalBtn from './js/addIventListenerModalBtn.js'; //! пока не надо, поключена ЛОКАЛЬНО\n\n//! ++++ Создаем слушателей на кнопках WATCHED и QUEUE для страницы MY LIBRARY +++++++\nrefs.watchedHeader.addEventListener('click', onMyLibraryWatched);\nrefs.queueHeader.addEventListener('click', onQueue);\n\n\n\n//! ++++++++++++++++++ ПОКАЗЫВАЕМ/ПРЯЧЕМ элементы разметки ++++++++++++++++++++\n//? ПОКАЗЫВАЕМ форму со строкой инпута:\n// refs.searchFormAlert.hidden = true; //! ПРЯЧЕМ\n// refs.searchFormAlert.hidden = false; //! ПОКАЗЫВАЕМ  +-+-+-+-\n\n//? ПРЯЧЕМ строку предупреждения об отсутствии фильмов:\n// refs.resultNotSuccessful.hidden = true;\n\n//? ПРЯЧЕМ блок кнопок WATCHED и QUEUE в header:\n// refs.watchedQueueHeader.hidden = true; +-+-+-+-\n\n\n\n\n\n//* +++++++++++++++++++++++++++++++ Создаем ГЛОБАЛЬНЫЕ переменные +++++++++++++++++++++++++++++++++++++++++\n\n//! Создаем глобальную переменную (films) для хранения значение всей (results)\nlet films = [];\n\n//! Создаем глобальную переменную (idFilms) для хранения idF одного фильма\nlet idFilms = 1;\n\n//! Создаем глобальную переменную (infoFilm) для хранения полной информации об одном фильме\nlet infoFilm = null;\n\n\n//! Переменная для определения типа запроса в кнопке LOAD MORE\n//! и типа станиц WATCHED и QUEUE\nlet currentPage = \"\";\n\n//! Переменные для хранения массива объектов фильмов для станиц WATCHED и QUEUE\nlet localStorageWatched = JSON.parse(localStorage.getItem(\"watched\")) ?? [];\nlet localStorageQueue = JSON.parse(localStorage.getItem(\"queue\")) ?? [];\n\n\n\n\n//* +++++++++++++++++++++++++++++++++++++++ Блок Функций  +++++++++++++++++++++++++++++++++++++++++++++++++\n\n//? Тестируем-консолим тип жанра по его id\n// console.log(\"genres:\", genres); //!\n// const genreName = convertingIdToGenre(10770);\n// console.log(\"genreName:\", genreName); //!\n\n\n\n//!!!!!! Загрузка популярных фильмов на главную (первую) страницу (без нажатия на кнопки HOME или Filmoteka)\n// onHome();\n\n//* -------------------------- Ф-ция-запрос_1, к-рая прослушивает события на кнопке HOME: ----------------------\n\n\n//* ---------- Ф-ция-запрос_2, к-рая прослушивает события на поле ввода данных - input form:-------\n\n\n\n\n\n//* -------------------------- Ф-ция-запрос_3, к-рая запрашивает полную информацию об одном фильме: ----------------------\n//! +++ Запрос полной информации о фильме для МОДАЛКИ +++\nasync function onMovieDetails(event) {\n  console.log(\"Вешаю слушателя на открытие МОДАЛКИ (onMovieDetails)\"); //!\n  //? !!!!!!! ПОЛУЧАЕМ (id) фильма по клику на карточке фильма !!!!!!!!!!!!!!!\n  if (event.target.closest(\"li\")) {\n    const itemId = event.target.closest(\"li\");\n    // console.log(\"itemId:\", itemId); //!\n    idFilms = Number(itemId.getAttribute(\"key\")); //!!! вот ОН, РОДНОЙ!!!\n    console.log(\"idFilms:\", idFilms); //!\n  } else return;\n  //?__________ ПОЛУЧАЕМ (id) фильма по клику на карточке фильма __________\n\n  //! ПОКАЗЫВАЕМ Spinner\n  spinner.startSpinner();\n\n\n  //! ==> Делаем запрос-3 полной информации о фильме для МОДАЛКИ.\n  try {\n    const results = await themoviedbApiService.getMovieDetails(idFilms);\n    //! Очищаем контейнер МОДАЛКИ:\n    clearModalContainer();\n    //! Перезаписываем в глобальную переменную (films) значение всей (results)\n    infoFilm = results;\n  } catch (error) {\n    //! Очищаем контейнер МОДАЛКИ:\n    clearModalContainer();\n    //! Прячем Spinner\n    spinner.removeSpinner();\n    //! Очищаем контейнер переменную (films):\n    infoFilm = null;\n    console.log(error); //!\n    Notiflix.Notify.failure(`Ошибка запроса: ${error.message}`, { timeout: 3500, },);\n  }\n  //? ------- Получаем и консолим все данные для рендера разметки главной страницы -------\n  // console.log(\"getMovieDetails ==> infoFilm:\", infoFilm); //!\n  // const titleOrName = infoFilm.title || infoFilm.name;\n  // console.log(\"titleOrName:\", titleOrName);\n  // console.log(\"id:\", infoFilm.id); //!\n  // console.log(\"poster_path:\", infoFilm.poster_path);\n  // console.log(\"Vote:\", infoFilm.vote_average);\n  // console.log(\"Votes:\", infoFilm.vote_count);\n  // console.log(\"Popularity:\", infoFilm.popularity);\n  // const originalTitleOrName = infoFilm.original_title || infoFilm.original_name;\n  // console.log(\"Original Title:\", originalTitleOrName);\n  // const genresAllOneFilm = infoFilm.genres.map(item => item.name).join(\", \");\n  // console.log(\"Genre:\", genresAllOneFilm); //! строка всех жанров\n  // console.log(\"About:\", infoFilm.overview);\n  //?_________________КОНЕЦ Получения и консоли всех данных _____________________\n\n  //! ==> Открываем модалку\n  window.addEventListener('keydown', onEscKeyPress);\n  document.body.classList.add('show-modal');\n\n  //! Прячем Spinner\n  spinner.removeSpinner();\n\n  //! Рисование интерфейса \n  appendInfoMovieMarkup(infoFilm);\n\n  //! Добавляем ГОТОВЫХ слушателей на кнопках <ADD TO WATCHED> и <ADD TO QUEUE> для МОДАЛКИ\n  addIventListenerModalBtn();\n\n  //! Вызываем БЛОК ЛОГИКИ работы кнопок <ADD TO WATCHED> и <ADD TO QUEUE> \n  operationLogicWatchedQueue();\n};\n\n\n\n\n//* -------------- Ф-ция_4, ДОБАВЛЕНИЕ/УДАЛЕНИЕ просмотренных фильмов в localStorage по кноке ADD TO WATCHED: ----------\n//! +++ Запрос полной информации о фильме для МОДАЛКИ +++\nfunction onWatchedModal() {\n  console.log(\"Вешаю слушателя на кнопку ADD TO WATCHED в МОДАЛКЕ\"); //!\n\n  console.log(\"infoFilm:\", infoFilm); //!\n  console.log(\"infoFilm.id:\", infoFilm.id); //!\n\n  console.log(\"Ф-ция_4_refs.watchedModal ==>:\", refs.watchedModal); //!\n\n  const textWatchedModal = refs.watchedModal.textContent;\n  console.log(\"textWatchedModal ==> начало:\", textWatchedModal); //!\n\n  if (textWatchedModal === \"ADD TO WATCHED\") {\n    //! Блокировка повторной записи фильма в localStorage (ВРЕМЕННО)\n    if (localStorageWatched.find(option => option.id === infoFilm.id)) {\n      Notiflix.Notify.warning(`Фильм ${infoFilm.title || infoFilm.name} уже есть в WATCHED`, { timeout: 3500, },);\n      refs.watchedModal.textContent = \"DELETE FROM WATCHED\";\n      if (refs.watchedModal.classList.contains(\"colorGreen\")) refs.watchedModal.classList.remove(\"colorGreen\");\n      if (!refs.watchedModal.classList.contains(\"colorRed\")) refs.watchedModal.classList.add(\"colorRed\");\n      return;\n    };\n    //! Запись фильма в localStorage\n    localStorageWatched = [...localStorageWatched, infoFilm];\n    console.log(\"localStorageWatched:\", localStorageWatched); //!\n    localStorage.setItem(\"watched\", JSON.stringify(localStorageWatched));\n    Notiflix.Notify.success(`Фильм ${infoFilm.title || infoFilm.name} добавлен в WATCHED`, { timeout: 3500, },);\n    //! Смена названия (textContent) кнопки на \"DELETE FROM WATCHED\"\n    refs.watchedModal.textContent = \"DELETE FROM WATCHED\";\n    if (refs.watchedModal.classList.contains(\"colorGreen\")) refs.watchedModal.classList.remove(\"colorGreen\");\n    if (!refs.watchedModal.classList.contains(\"colorRed\")) refs.watchedModal.classList.add(\"colorRed\");\n    console.log(\"textWatchedModal ==> конец:\", textWatchedModal); //!\n  } else {\n    if (textWatchedModal === \"DELETE FROM WATCHED\") {\n      localStorageWatched = localStorageWatched.filter(item => item.id !== infoFilm.id);\n      localStorage.setItem(\"watched\", JSON.stringify(localStorageWatched));\n      console.log(\"Фильм удален из WATCHED\"); //!\n      Notiflix.Notify.info(`Фильм ${infoFilm.title || infoFilm.name} удален из WATCHED`, { timeout: 3500, },);\n      refs.watchedModal.textContent = \"ADD TO WATCHED\";\n      if (refs.watchedModal.classList.contains(\"colorRed\")) refs.watchedModal.classList.remove(\"colorRed\");\n      if (!refs.watchedModal.classList.contains(\"colorGreen\")) refs.watchedModal.classList.add(\"colorGreen\");\n\n      if (currentPage === \"watched\") {\n        console.log(\"currentPage\", currentPage); //!\n        onCloseModal();\n        //! Очищаем контейнер:\n        clearMovieContainer();\n        appendWatchedQueueMarkup(localStorageWatched);\n      };\n    };\n  };\n};\n\n\n\n\n//* ------------------ Ф-ция_5, ДОБАВЛЕНИЕ/УДАЛЕНИЕ просмотренных фильмов в localStorage по кноке ADD TO QUEUE: --------------\n//! +++ Запрос полной информации о фильме для МОДАЛКИ +++\nfunction onQueueModal() {\n  console.log(\"Вешаю слушателя на кнопку ADD TO QUEUE в МОДАЛКЕ\"); //!\n\n  console.log(\"infoFilm:\", infoFilm); //!\n  console.log(\"infoFilm.id:\", infoFilm.id); //!\n\n  const textQueuedModal = refs.queueModal.textContent;\n  console.log(\"textQueuedModal ==> начало:\", textQueuedModal); //!\n\n  if (textQueuedModal === \"ADD TO QUEUE\") {\n    //! Блокировка повторной записи фильма в localStorage (ВРЕМЕННО)\n    if (localStorageQueue.find(option => option.id === infoFilm.id)) {\n      Notiflix.Notify.warning(`Фильм ${infoFilm.title || infoFilm.name} уже есть в QUEUE`, { timeout: 3500, },);\n      refs.queueModal.textContent = \"DELETE FROM QUEUE\";\n      if (refs.queueModal.classList.contains(\"colorGreen\")) refs.queueModal.classList.remove(\"colorGreen\");\n      if (!refs.queueModal.classList.contains(\"colorRed\")) refs.queueModal.classList.add(\"colorRed\");\n      return;\n    };\n    //! Запись фильма в localStorage\n    localStorageQueue = [...localStorageQueue, infoFilm];\n    console.log(\"localStorageQueue:\", localStorageQueue); //!\n    localStorage.setItem(\"queue\", JSON.stringify(localStorageQueue));\n    Notiflix.Notify.success(`Фильм ${infoFilm.title || infoFilm.name} добавлен в QUEUE`, { timeout: 3500, },);\n    //! Смена названия (textContent) кнопки на \"DELETE FROM QUEUE\"\n    refs.queueModal.textContent = \"DELETE FROM QUEUE\";\n    if (refs.queueModal.classList.contains(\"colorGreen\")) refs.queueModal.classList.remove(\"colorGreen\");\n    if (!refs.queueModal.classList.contains(\"colorRed\")) refs.queueModal.classList.add(\"colorRed\");\n    console.log(\"textQueuedModal ==> конец:\", textQueuedModal); //!\n  } else {\n    if (textQueuedModal === \"DELETE FROM QUEUE\") {\n      localStorageQueue = localStorageQueue.filter(item => item.id !== infoFilm.id);\n      localStorage.setItem(\"queue\", JSON.stringify(localStorageQueue));\n      console.log(\"Фильм удален из QUEUE\");\n      Notiflix.Notify.info(`Фильм ${infoFilm.title || infoFilm.name} удален из QUEUE`, { timeout: 3500, },);\n      refs.queueModal.textContent = \"ADD TO QUEUE\";\n      if (refs.queueModal.classList.contains(\"colorRed\")) refs.queueModal.classList.remove(\"colorRed\");\n      if (!refs.queueModal.classList.contains(\"colorGreen\")) refs.queueModal.classList.add(\"colorGreen\");\n      if (currentPage === \"queue\") {\n        console.log(\"currentPage\", currentPage); //!\n        onCloseModal();\n        //! Очищаем контейнер:\n        clearMovieContainer();\n        appendWatchedQueueMarkup(localStorageQueue);\n      };\n    };\n  };\n};\n\n\n\n\n//* -------------------------- Ф-ция_6, для работы с MY LIBRARY или кнопкой WATCHED: ----------------------\nfunction onMyLibraryWatched() {\n  console.log(\"Вешаю слушателя на кнопку my-library.js==>WATCHED\"); //!\n\n  // refs.watchedModal.textContent = \"DELETE FROM WATCHED\";\n  //! Назначаем тип станицы WATCHED для логики работы кнопок МОДАЛКИ\n  currentPage = \"watched\";\n\n  //! ПРЯЧЕМ строку предупреждения об отсутствии фильмов:\n  // refs.resultNotSuccessful.hidden = true;\n\n  //! ПРЯЧЕМ форму со строкой инпута:\n  // refs.searchFormAlert.hidden = true;\n\n  //! ПОКАЗЫВАЕМ блок кнопок WATCHED и QUEUE в header:\n  // refs.watchedQueueHeader.hidden = false;\n\n  //! Кнопка LOAD MORE => показываем и отключаем\n  // loadMoreBtn.show();\n  // loadMoreBtn.hide(); //! Временно => ПРЯЧЕМ\n  // loadMoreBtn.disable();\n\n  //! Очищаем контейнер:\n  clearMovieContainer();\n\n  //! Перезаписываем в локальную переменную (results) значение всего (localStorage)\n  const results = JSON.parse(localStorage.getItem(\"watched\")) ?? [];\n  console.log(\"results:\", results); //!\n\n  //! Рисование интерфейса \n  appendWatchedQueueMarkup(results);\n\n  //! Кнопка LOAD MORE => включаем\n  // loadMoreBtn.enable();\n};\n\n\n\n\n//* -------------------------- Ф-ция_7, для работы с кнопкой QUEUEв MY LIBRARY : ----------------------\nfunction onQueue() {\n  console.log(\"Вешаю слушателя на кнопку my-library.js==>QUEUE\"); //!\n\n  //! Назначаем тип станицы QUEUE для логики работы кнопок МОДАЛКИ\n  currentPage = \"queue\";\n\n  //! ПРЯЧЕМ строку предупреждения об отсутствии фильмов:\n  // refs.resultNotSuccessful.hidden = true;\n\n  //! ПРЯЧЕМ форму со строкой инпута:\n  // refs.searchFormAlert.hidden = true;\n\n  //! ПОКАЗЫВАЕМ блок кнопок WATCHED и QUEUE в header:\n  // refs.watchedQueueHeader.hidden = false;\n\n  //! Кнопка LOAD MORE => показываем и отключаем\n  // loadMoreBtn.show();\n  // loadMoreBtn.hide(); //! Временно => ПРЯЧЕМ\n  // loadMoreBtn.disable();\n\n  //! Очищаем контейнер:\n  clearMovieContainer();\n\n  //! Перезаписываем в локальную переменную (results) значение всего (localStorage)\n  const results = JSON.parse(localStorage.getItem(\"queue\")) ?? [];\n  console.log(\"results:\", results); //!\n\n  //! Рисование интерфейса \n  appendWatchedQueueMarkup(results);\n\n  //! Кнопка LOAD MORE => включаем\n  // loadMoreBtn.enable();\n};\n\n\n\n\n\n//* ++++++++++++++++++++++++++++++++ Кнопка LOAD MORE (для Ф-ции-запрос ==> ОБЩАЯ - для 1 и 2) ++++++++++++++++++++++++++++++++++++++++++++\n//!  Ф-ция, к-рая прослушивает события на кнопке LOAD MORE:\nasync function onLoadMore() {\n\n  //! Кнопка LOAD MORE => ВЫключаем\n  // loadMoreBtn.disable()\n\n  //! проверяеm значения переменной (currentPage) \n  //! и СРАЗУ получаем в переменной films нужный массив объектов \n  //! для отрисовки следующих 20 фильмов\n  await checkResults();\n\n  // console.log(\"onLoadMore ==> films:\", films); //!\n\n  //! Очищаем контейнер:\n  clearMovieContainer();\n\n  //!  Проверка results на ОКОНЧАНИЕ КОЛЛЕКЦИИИ\n  // checkResultsForEnd(endOfCollection);\n\n  //! Рисование интерфейса\n  appendMoviesMarkup(films);\n\n  //! Кнопка LOAD MORE => включаем\n  // loadMoreBtn.enable();\n};\n//* +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n\n\n\n\n//* ---------------------------------------------- Функции-вызывалки ;-) ----------------------------------------------\n//! ++++++++++++++ Ф-ция, к-рая проверяет значения переменной (currentPage) для определения типа запроса в кнопке LOAD MORE ++++++++++++++\nasync function checkResults() {\n  if (currentPage === \"home-Filmoteka\") {\n    const results = await themoviedbApiService.getTrendingAllDay();\n    films = results;\n    // console.log(\"home-Filmoteka ==> films:\", films); //!\n  } else {\n    if (currentPage === \"Movie search\") {\n      const results = await themoviedbApiService.getSearchMovies();\n      films = results;\n      // console.log(\"Movie search ==> films:\", films); //!\n    } else {\n      return;\n    }\n  };\n};\n\n\n\n//! ++++++++++++++ Ф-ция, к-рая получает id жанра и возвращает тип жанра ++++++++++++++\n\n\n\n\n//! ++++++++++++++ Ф-ция, к-рая очищает контейнер при новом вводе данных в input form: ++++++++++++++\nfunction clearMovieContainer() {\n  refs.moviesCards.innerHTML = \"\";\n};\n\n\n\n//! ++++++++++++++ Ф-ция, к-рая очищает контейнер МОДАЛКИ: ++++++++++++++\nfunction clearModalContainer() {\n  refs.InfoMovie.innerHTML = \"\";\n};\n\n\n\n//! ++++++++++++++ Ф-ция, к-рая  прверяет results на пустой массив: ++++++++++++++\n\n\n\n//! +++++++++++++++++++++++ Функции для МОДАЛКИ +++++++++++++++++++++++++++\n//? ----- для тестирования открытия модалки по кнопке\n// function onOpenModal() {\n//     window.addEventListener('keydown', onEscKeyPress);\n//     document.body.classList.add('show-modal');\n// }\n\nfunction onCloseModal() {\n  window.removeEventListener('keydown', onEscKeyPress);\n  document.body.classList.remove('show-modal');\n  //! Очищаем контейнер МОДАЛКИ:\n  clearModalContainer();\n}\n\nfunction onBackdropClick(event) {\n  // console.log(event.currentTarget); //!\n  // console.log(event.target); //!\n  if (event.currentTarget === event.target) {\n    // console.log('Кликнули именно в бекдроп!!!!'); //!\n    onCloseModal();\n  }\n};\n\nfunction onEscKeyPress(event) {\n  // console.log(event.code); //!\n  // const ESC_KEY_CODE = 'Escape';\n  // const isEscKey = event.code === ESC_KEY_CODE;\n  // if (isEscKey) {\n  if (event.code === 'Escape') {\n    onCloseModal();\n  }\n}\n//!_____________________________________________________________________\n\n\n\n\n//! +++++++++ Создаем слушателей на кнопках <ADD TO WATCHED> и <ADD TO QUEUE> для МОДАЛКИ ++++++++++++++\nfunction addIventListenerModalBtn() {\n  refs.watchedModal = document.querySelector('button[data-action=\"modal-add-watched\"]');\n  refs.queueModal = document.querySelector('button[data-action=\"modal-add-queue\"]');\n\n  console.log(\"addIventListenerModalBtn_refs.watchedModal:\", refs.watchedModal); //!\n  console.log(\"addIventListenerModalBtn_refs.queueModal:\", refs.queueModal); //!\n\n  refs.watchedModal.addEventListener('click', onWatchedModal);\n  refs.queueModal.addEventListener('click', onQueueModal);\n\n  //! -----------------------------------------------------------------------------\n  // refs.watchedModal.addEventListener('click', () => {\n  //     console.log(\"Вешаю ГОТОВОГО слушателя на кнопку ADD TO WATCHED в МОДАЛКЕ\"); //!\n  // });\n\n  // refs.queueModal.addEventListener('click', () => {\n  //     console.log(\"Вешаю ГОТОВОГО слушателя на кнопку ADD TO QUEUE в МОДАЛКЕ\"); //!\n  // });\n};\n\n\n\n//!+++++++++++++ БЛОК ЛОГИКИ работы кнопок <ADD TO WATCHED> и <ADD TO QUEUE> ++++++++++++++++++\nfunction operationLogicWatchedQueue() {\n  console.log(\"БЛОК ЛОГИКИ_refs.watchedModal ==>:\", refs.watchedModal); //!\n  console.log(\"БЛОК ЛОГИКИ_refs.queueModal ==>:\", refs.queueModal); //!\n  //! Устанвливаем начальные значения textContent для кнопок WATCHED и QUEUE в модалке\n  //! в зависимости от того, на какой странице находится пользователь\n  refs.watchedModal.textContent = \"ADD TO WATCHED\";\n  if (refs.watchedModal.classList.contains(\"colorRed\")) refs.watchedModal.classList.remove(\"colorRed\");\n  if (!refs.watchedModal.classList.contains(\"colorGreen\")) refs.watchedModal.classList.add(\"colorGreen\");\n  if (currentPage === \"watched\") {\n    refs.watchedModal.textContent = \"DELETE FROM WATCHED\";\n    if (refs.watchedModal.classList.contains(\"colorGreen\")) refs.watchedModal.classList.remove(\"colorGreen\");\n    if (!refs.watchedModal.classList.contains(\"colorRed\")) refs.watchedModal.classList.add(\"colorRed\");\n\n  };\n  refs.queueModal.textContent = \"ADD TO QUEUE\";\n  if (refs.queueModal.classList.contains(\"colorRed\")) refs.queueModal.classList.remove(\"colorRed\");\n  if (!refs.queueModal.classList.contains(\"colorGreen\")) refs.queueModal.classList.add(\"colorGreen\");\n  refs.queueModal.classList.add(\"colorGreen\");\n  if (currentPage === \"queue\") {\n    refs.queueModal.textContent = \"DELETE FROM QUEUE\";\n    if (refs.queueModal.classList.contains(\"colorGreen\")) refs.queueModal.classList.remove(\"colorGreen\");\n    if (!refs.queueModal.classList.contains(\"colorRed\")) refs.queueModal.classList.add(\"colorRed\");\n  };\n}\n\n\n\n\n\n\n//* --------------------------------------- Функции-разметки ---------------------------------------------------------\n//! +++++++++++++++++++++++++++++ Markup WATCHED и QUEUE ++++++++++++++++++++++++++++++++++++++++++++++\n//*  Ф-ция-then, к-рая отрисовывает интерфейс ВСЕХ карточек на странице:\nfunction appendWatchedQueueMarkup(results) {\n  //!   Добавляем новую разметку в div-контейнер с помощью insertAdjacentHTML:\n  refs.moviesCards.insertAdjacentHTML('beforeend', createWatchedQueueCardsMarkup(results));\n};\n\n//! --------------------------------------------------------------------------------------------\n//*   Ф-ция, к-рая создает новую разметку для ОДНОЙ карточки из ВСЕХ карточек:\nfunction createWatchedQueueCardsMarkup(results) {\n  console.log(\"results:\", results);\n  return results\n    .map(({\n      id,\n      poster_path,\n      title,\n      name,\n      genres,\n      first_air_date,\n      release_date,\n      vote_average\n    }) => {\n\n      //? Получаем строку со всеми жанрами\n      const genresAllOneFilm = genres.map(item => item.name).join(\", \");\n      // console.log(\"genresAllOneFilm:\", genresAllOneFilm); //!\n\n      //? Получаем значение года из строки даты:\n      const date = first_air_date || release_date || \"???? - ?? - ??\";\n      // console.log(\"date:\", date); //!\n      const yearDate = date.substr(0, 4); //! значение года из строки даты:\n      // console.log(\"yearDate:\", yearDate); //!\n\n      //?Убираем лишние знаки после запятой \n      const voteAverage = vote_average.toFixed(1);\n      // console.log(\"voteAverage:\", voteAverage); //!\n\n      //? Делаем заглавныее буквы в названии фильма (пока НЕ РАБОТАЕТ capitalsName)\n      let capitalsTitle = title;\n      if (title) {\n        capitalsTitle = title.toUpperCase();\n        // const title = title.toUpperCase();\n        // console.log(\"capitalsTitle:\", capitalsTitle); //!\n      };\n\n      let capitalsName = name;\n      if (name) {\n        const capitalsName = name.toUpperCase(); //!!! тут ошибка сделана СПЕЦИАЛЬНО!!!\n        // const name = name.toUpperCase();\n        // console.log(\"capitalsName:\", capitalsName); //!\n      };\n\n\n      return `\n                <li key=${id}>\n                    <img src=\"https://image.tmdb.org/t/p/w780${poster_path}\" alt=\"${title || name}\" />\n\n                    <div>\n                        <h2>${capitalsTitle || capitalsName}</h2>\n                        <h3>${genresAllOneFilm} &nbsp|&nbsp ${yearDate}&nbsp &nbsp${voteAverage}</h3>\n                    </div>\n                </li>\n                `;\n    })\n    .join('');\n};\n\n\n\n\n//! +++++++++++++++++++++++++++++ Markup infoFilm ++++++++++++++++++++++++++++++++++++++++++++++\n//*  Ф-ция-then, к-рая отрисовывает интерфейс ОДНОГО фильма в МОДАЛКЕ:\nfunction appendInfoMovieMarkup(infoFilm) {\n  //!   Добавляем новую разметку в div-контейнер с помощью insertAdjacentHTML:\n  refs.InfoMovie.insertAdjacentHTML('afterbegin', createInfoMovieMarkup(infoFilm));\n\n  //! Добавляем ГОТОВЫХ слушателей на кнопках <ADD TO WATCHED> и <ADD TO QUEUE> для МОДАЛКИ\n  // addIventListenerModalBtn(); //! НЕ СЮДА!!!\n};\n\n//! --------------------------------------------------------------------------------------------\n//*   Ф-ция, к-рая создает новую разметку ОДНОГО фильма в МОДАЛКЕ:\nfunction createInfoMovieMarkup(infoFilm) {\n  // console.log(\"createInfoMovieMarkup ==> infoFilm:\", infoFilm); //!\n  const {\n    id,\n    poster_path,\n    title, name,\n    vote_average,\n    vote_count,\n    popularity,\n    original_title,\n    original_name,\n    genres,\n    overview\n  } = infoFilm\n\n  //? Получаем строку со всеми жанрами\n  const genresAllOneFilm = genres.map(item => item.name).join(\", \");\n\n  //? Делаем заглавныее буквы в названии фильма (пока НЕ РАБОТАЕТ capitalsName)\n  let capitalsTitle = title;\n  if (title) {\n    capitalsTitle = title.toUpperCase();\n    // const title = title.toUpperCase();\n    // console.log(\"capitalsTitle:\", capitalsTitle); //!\n  };\n\n  let capitalsName = name;\n  if (name) {\n    const capitalsName = name.toUpperCase(); //!!! тут ошибка сделана СПЕЦИАЛЬНО!!!\n    // const name = name.toUpperCase();\n    // console.log(\"capitalsName:\", capitalsName); //!\n  };\n\n  return `\n        <img src=\"https://image.tmdb.org/t/p/w300${poster_path}\" alt=\"${title || name}\" />\n        \n        <div class=\"modal-сontent\">\n            <h3 class=\"modal-title-film\">${capitalsTitle || capitalsName}</h3\n            <table class=\"modal-info\">\n                <tbody>\n                    <tr>\n                        <td class=\"modal-key\">Vote/Votes</td>\n                        <td class=\"modal-parametr\"><span class=\"modal-parametr-vote\">${vote_average}</span> / ${vote_count}</td>\n                    </tr>\n                    <tr>\n                        <td class=\"modal-key\">Popularity</td>\n                        <td class=\"modal-parametr\">${popularity}</td>\n                    </tr>\n                    <tr>\n                        <td class=\"modal-key\">Original Title</td>\n                        <td class=\"modal-parametr\">${original_title || original_name}</td>\n                    </tr>\n                    <tr>\n                        <td class=\"modal-key\">Genre</td>\n                        <td class=\"modal-parametr\">${genresAllOneFilm}</td>\n                    </tr>\n                </tbody>\n            </table\n            <div class=\"modal-about-film\">\n                <h5 class=\"modal-about-title\">ABOUT</h5>\n                <span class=\"modal-about-text\">${overview}</span>\n            </div\n        \n            <div class=\"modal-button\" data-action=\"library-btn\">\n                <button \n                    type=\"button\" \n                    class=\"modal-watched\" \n                    data-action=\"modal-add-watched\"\n                    >\n                    ADD TO WATCHED\n                </button>\n                <button \n                    type=\"button\" \n                    class=\"modal-queue\" \n                    data-action=\"modal-add-queue\"\n                    >\n                    ADD TO QUEUE\n                </button>\n            </div>\n        </div>\n    `;\n};\n\n// --KHARLAMOVA TETIANA----------------МОДАЛЬНЕ ВІКНО З КОМАНДОЮ----------------------------------\n(() => {\n    const refsModalTeam = {\n        openModalTeamLink: document.querySelector('.team-link'),\n        closeModalTeamBtn: document.querySelector('.team-close-btn'),\n        modalTeam: document.querySelector('.backdrop-team'),\n        body: document.querySelector('body'),\n    };\n    const { openModalTeamLink, closeModalTeamBtn, modalTeam, body } =\n        refsModalTeam;\n    openModalTeamLink.addEventListener('click', onOpenModalTeam);\n    closeModalTeamBtn.addEventListener('click', onCloseModalTeam);\n    modalTeam.addEventListener('click', onBackdropTeamClick);\n\n    function onCloseModalTeam(e) {\n        modalTeam.classList.toggle('is-hidden');\n        body.classList.toggle('no-scroll');\n        window.removeEventListener('keydown', onEscKeyPress);\n    }\n\n    function onOpenModalTeam(e) {\n        window.addEventListener('keydown', onEscKeyPress);\n        modalTeam.classList.toggle('is-hidden');\n        body.classList.toggle('no-scroll');\n    }\n    function onEscKeyPress(e) {\n        if (e.key === 'Escape') {\n            onCloseModalTeam();\n        }\n    }\n\n    function onBackdropTeamClick(e) {\n        if (e.currentTarget === e.target) {\n            onCloseModalTeam();\n        }\n    }\n})();\n// -----------------------END OF МОДАЛЬНЕ ВІКНО З КОМАНДОЮ----------------------------\n\n\n\n\n\n"],"names":["$eWCmQ","parcelRequire","$fc8e7c71b3b7ed96$var$refs","$lpPzL","default","$fc8e7c71b3b7ed96$var$themoviedbApiService","$6GGET","myLibraryBtn","addEventListener","$fc8e7c71b3b7ed96$var$onMyLibraryWatched","movieDetails","async","event","console","log","target","closest","itemId","$fc8e7c71b3b7ed96$var$idFilms","Number","getAttribute","$3oXzi","startSpinner","results","getMovieDetails","$fc8e7c71b3b7ed96$var$clearModalContainer","$fc8e7c71b3b7ed96$var$infoFilm","error","removeSpinner","$parcel$interopDefault","Notify","failure","message","timeout","window","$fc8e7c71b3b7ed96$var$onEscKeyPress","document","body","classList","add","infoFilm1","InfoMovie","insertAdjacentHTML","infoFilm2","id","poster_path","title","name","vote_average","vote_count","popularity","original_title","original_name","genres","overview","genresAllOneFilm","map","item","join","capitalsTitle","toUpperCase","capitalsName","$fc8e7c71b3b7ed96$var$createInfoMovieMarkup","watchedModal","querySelector","queueModal","$fc8e7c71b3b7ed96$var$onWatchedModal","$fc8e7c71b3b7ed96$var$onQueueModal","textContent","contains","remove","$fc8e7c71b3b7ed96$var$currentPage","$fc8e7c71b3b7ed96$var$operationLogicWatchedQueue","closeModalBtn","$fc8e7c71b3b7ed96$var$onCloseModal","backdrop","currentTarget","watchedHeader","queueHeader","$fc8e7c71b3b7ed96$var$clearMovieContainer","JSON","parse","localStorage","getItem","$fc8e7c71b3b7ed96$var$appendWatchedQueueMarkup","$fc8e7c71b3b7ed96$var$localStorageWatched","$fc8e7c71b3b7ed96$var$localStorageQueue","textWatchedModal","find","option","warning","setItem","stringify","success","filter","info","textQueuedModal","moviesCards","innerHTML","removeEventListener","code","first_air_date","release_date","yearDate","substr","voteAverage","toFixed","$fc8e7c71b3b7ed96$var$createWatchedQueueCardsMarkup","refsModalTeam","openModalTeamLink","closeModalTeamBtn","modalTeam","onCloseModalTeam","e","toggle","onEscKeyPress1","key"],"version":3,"file":"my-library.3ce08195.js.map"}
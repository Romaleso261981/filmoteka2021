{"mappings":"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","sources":["src/my-library.js"],"sourcesContent":["import Notiflix from 'notiflix';\nimport spinner from './js/preLoader';\nimport './js/login-modal';\nimport operationLogicWatchedQueue from './js/operationLogicWatchedQueue.js';\n\n//* +++++++++++++++++++++++++++++++++++ Импорты файлов ++++++++++++++++++++++++++++++++++++++++++++\nfunction getRefsLibrary() {\n  return {\n    //! Получаем ссылку на div-контейнер для разметки карточек изображений:\n    moviesCards: document.querySelector('ul[data-action=\"movies-cards\"]'),\n    //! Получаем ссылку на div-контейнер для разметки карточек изображений:\n    InfoMovie: document.querySelector('div[data-action=\"modal-markup\"]'),\n    //! Получаем ссылку на кнопку HOME:\n    homeBtn: document.querySelector('a[data-action=\"button-home\"]'),\n    //! Получаем ссылку на кнопку Filmoteka:\n    filmotekaBtn: document.querySelector('a[data-action=\"button-filmoteka\"]'),\n    //! Получаем ссылку на кнопку MY LIBRARY:\n    myLibraryBtn: document.querySelector('a[data-action=\"button-mylibrary\"]'),\n    //! Получаем ссылку на <section class=\"section-hero\"> ==> на poster_path:\n    movieDetails: document.querySelector('section[data-action=\"section-hero\"]'),\n    closeModalBtn: document.querySelector('[data-action=\"close-modal\"]'),\n    backdrop: document.querySelector('.js-backdrop'),\n    //! Получаем ссылку на строку предупреждения об отсутствии фильмов:\n    resultNotSuccessful: document.querySelector('[data-action=\"search-alert\"]'),\n    //! Получаем ссылку на блок кнопок WATCHED и QUEUE в header:\n    watchedQueueHeader: document.querySelector('[data-action=\"library-btn\"]'),\n    //! Получаем ссылку на кнопоку WATCHED в header:\n    watchedHeader: document.querySelector('[data-action=\"library-watched\"]'),\n    //! Получаем ссылку на кнопоку QUEUE в header:\n    queueHeader: document.querySelector('[data-action=\"library-queue\"]'),\n  };\n}\n\n//! Создаем объект всех ссылок refs.*\nconst refs = getRefsLibrary();\n//* +++++++++++++++++++++++++++++++ Создаем ВСЕХ слушателей +++++++++++++++++++++++++++++++++++++++++\n\n//! Создаем слушателя событий на кнопке MY LIBRARY:\nrefs.myLibraryBtn.addEventListener('click', onMyLibraryWatched);\n//! Создаем слушателя событий на <section class=\"section-hero\"> ==> на poster_path:\nrefs.movieDetails.addEventListener('click', onMovieDetails);\n\n//! +++++++++++++++++++ Создаем слушателей для МОДАЛКИ ++++++++++++++++++++++++\n// refs.openModalBtn.addEventListener('click', onOpenModal); //? ----- для тестирования\nrefs.closeModalBtn.addEventListener('click', onCloseModal);\nrefs.backdrop.addEventListener('click', onBackdropClick);\n\n//! ++++ Создаем слушателей на кнопках WATCHED и QUEUE для страницы MY LIBRARY +++++++\nrefs.watchedHeader.addEventListener('click', onMyLibraryWatched);\nrefs.queueHeader.addEventListener('click', onQueue);\n\n\n//* +++++++++++++++++++++++++++++++ Создаем ГЛОБАЛЬНЫЕ переменные +++++++++++++++++++++++++++++++++++++++++\n\n//! Создаем глобальную переменную (idFilms) для хранения idF одного фильма\nlet idFilms = 1;\n\n//! Создаем глобальную переменную (infoFilm) для хранения полной информации об одном фильме\nlet infoFilm = null;\n\n//! Переменная для определения типа запроса в кнопке LOAD MORE\n//! и типа станиц WATCHED и QUEUE\nlet currentPage = '';\n\n//! Переменные для хранения массива объектов фильмов для станиц WATCHED и QUEUE\nlet localStorageWatched = JSON.parse(localStorage.getItem('watched')) ?? [];\nlet localStorageQueue = JSON.parse(localStorage.getItem('queue')) ?? [];\n\n\n\n\n//* +++++++++++++++++++++++++++++++++++++++ Блок Функций  +++++++++++++++++++++++++++++++++++++++++++++++++\n\n\n//!!!!!! Загрузка популярных фильмов на страницу MY LIDRARY\nonMyLibraryWatched();\n\n//* -------------------------- Ф-ция-запрос_3, к-рая запрашивает полную информацию об одном фильме: ----------------------\n//шукаємо по id фільм і виводимо його на сторінку\nasync function onMovieDetails(event) {\n  if (event.target.closest('li')) {\n    const itemId = event.target.closest('li');\n    idFilms = Number(itemId.getAttribute('key'));\n    console.log('idFilms:', idFilms);\n    findFilmByIdLs(idFilms);\n  } else return;\n\n\n  // забираємо всі фільми з localStorage\n  function getQueueData() {\n    try {\n      const watched = JSON.parse(localStorage.getItem('queue')) || [];\n      if (watched === null) {\n        return [];\n      }\n      return watched;\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  function getWatchedData() {\n    try {\n      const watched = JSON.parse(localStorage.getItem('watched'));\n      if (watched === null) {\n        return [];\n      }\n      return watched;\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  // шукає об'єкт по ID\n  function findFilmByIdLs(id) {\n    const films = [...getQueueData(), ...getWatchedData()]\n    const film = films.find((film) => film.id == id)\n    infoFilm = film;\n    return film\n}\n  //! ПОКАЗЫВАЕМ Spinner\n  spinner.startSpinner();\n  \n   //! Достаем из localStorage полную информации о фильме для МОДАЛКИ.\n  //! + проверяем на какой странице находимся (т.е. в каком localStorage искать) \n  if (currentPage === 'watched') {\n    infoFilm = localStorageWatched.find(option => option.id === idFilms);\n  };\n\n  if (currentPage === 'queue') {\n    infoFilm = localStorageQueue.find(option => option.id === idFilms);\n  };\n  //?_________________КОНЕЦ Получения и консоли всех данных _____________________\n\n  //! ==> Открываем модалку\n  window.addEventListener('keydown', onEscKeyPress);\n  document.body.classList.add('show-modal');\n\n  //! Прячем Spinner\n  spinner.removeSpinner();\n\n  //! Рисование интерфейса\n  appendInfoMovieMarkup(infoFilm);\n\n  //! Добавляем ГОТОВЫХ слушателей на кнопках <ADD TO WATCHED> и <ADD TO QUEUE> для МОДАЛКИ\n  addIventListenerModalBtn();\n\n  //! Вызываем БЛОК ЛОГИКИ работы кнопок <ADD TO WATCHED> и <ADD TO QUEUE>\n  operationLogicWatchedQueue(currentPage, refs, infoFilm, localStorageWatched, localStorageQueue);\n}\n\n//* -------------- Ф-ция_4, ДОБАВЛЕНИЕ/УДАЛЕНИЕ просмотренных фильмов в localStorage по кноке ADD TO WATCHED: ----------\n//! +++ Запрос полной информации о фильме для МОДАЛКИ +++\nfunction onWatchedModal() {\n  const textWatchedModal = refs.watchedModal.textContent;\n\n  if (textWatchedModal === 'ADD TO WATCHED') {\n    //! Блокировка повторной записи фильма в localStorage (ВРЕМЕННО)\n    if (localStorageWatched.find(option => option.id === infoFilm.id)) {\n      Notiflix.Notify.warning(\n        `Фильм ${infoFilm.title || infoFilm.name} уже есть в WATCHED`,\n        {\n          position: 'center-top',\n          clickToClose: true,\n          timeout: 2500,\n        }\n      );\n\n      refs.watchedModal.textContent = 'DELETE FROM WATCHED';\n      if (refs.watchedModal.classList.contains('modal-button-add-watched'))\n        refs.watchedModal.classList.remove('modal-button-add-watched');\n      if (!refs.watchedModal.classList.contains('modal-button-delete'))\n        refs.watchedModal.classList.add('modal-button-delete');\n      return;\n    }\n    //! Запись фильма в localStorage\n    localStorageWatched = [...localStorageWatched, infoFilm];\n    localStorage.setItem('watched', JSON.stringify(localStorageWatched));\n    Notiflix.Notify.success(\n      `Фильм ${infoFilm.title || infoFilm.name} добавлен в WATCHED`,\n      {\n        position: 'center-top',\n        clickToClose: true,\n        timeout: 2500,\n      }\n    );\n\n    //! Смена названия (textContent) кнопки на \"DELETE FROM WATCHED\"\n    refs.watchedModal.textContent = 'DELETE FROM WATCHED';\n    if (refs.watchedModal.classList.contains('modal-button-add-watched'))\n      refs.watchedModal.classList.remove('modal-button-add-watched');\n    if (!refs.watchedModal.classList.contains('modal-button-delete'))\n      refs.watchedModal.classList.add('modal-button-delete');\n  } else {\n    if (textWatchedModal === 'DELETE FROM WATCHED') {\n      localStorageWatched = localStorageWatched.filter(\n        item => item.id !== infoFilm.id\n      );\n      localStorage.setItem('watched', JSON.stringify(localStorageWatched));\n\n      Notiflix.Notify.info(\n        `Фильм ${infoFilm.title || infoFilm.name} удален из WATCHED`,\n        {\n          position: 'center-top',\n          clickToClose: true,\n          timeout: 2500,\n        }\n      );\n\n      refs.watchedModal.textContent = 'ADD TO WATCHED';\n      if (refs.watchedModal.classList.contains('modal-button-delete'))\n        refs.watchedModal.classList.remove('modal-button-delete');\n      if (!refs.watchedModal.classList.contains('modal-button-add-watched'))\n        refs.watchedModal.classList.add('modal-button-add-watched');\n\n      if (currentPage === 'watched') {\n        onCloseModal();\n        //! Очищаем контейнер:\n        clearMovieContainer();\n        appendWatchedQueueMarkup(localStorageWatched);\n      }\n    }\n  }\n}\n\n//* ------------------ Ф-ция_5, ДОБАВЛЕНИЕ/УДАЛЕНИЕ просмотренных фильмов в localStorage по кноке ADD TO QUEUE: --------------\n//! +++ Запрос полной информации о фильме для МОДАЛКИ +++\nfunction onQueueModal() {\n\n  const textQueuedModal = refs.queueModal.textContent;\n\n  if (textQueuedModal === 'ADD TO QUEUE') {\n    //! Блокировка повторной записи фильма в localStorage (ВРЕМЕННО)\n    if (localStorageQueue.find(option => option.id === infoFilm.id)) {\n\n      Notiflix.Notify.warning(\n        `Фильм ${infoFilm.title || infoFilm.name} уже есть в QUEUE`,\n        {\n          position: 'center-top',\n          clickToClose: true,\n          timeout: 2500,\n        }\n      );\n\n      refs.queueModal.textContent = 'DELETE FROM QUEUE';\n      if (refs.queueModal.classList.contains('modal-button-add-queue'))\n        refs.queueModal.classList.remove('modal-button-add-queue');\n      if (!refs.queueModal.classList.contains('modal-button-delete'))\n        refs.queueModal.classList.add('modal-button-delete');\n      return;\n    }\n    //! Запись фильма в localStorage\n    localStorageQueue = [...localStorageQueue, infoFilm];\n    localStorage.setItem('queue', JSON.stringify(localStorageQueue));\n\n    Notiflix.Notify.success(\n      `Фильм ${infoFilm.title || infoFilm.name} добавлен в QUEUE`,\n      {\n        position: 'center-top',\n        clickToClose: true,\n        timeout: 2500,\n      }\n    );\n\n    //! Смена названия (textContent) кнопки на \"DELETE FROM QUEUE\"\n    refs.queueModal.textContent = 'DELETE FROM QUEUE';\n    if (refs.queueModal.classList.contains('modal-button-add-queue'))\n      refs.queueModal.classList.remove('modal-button-add-queue');\n    if (!refs.queueModal.classList.contains('modal-button-delete'))\n      refs.queueModal.classList.add('modal-button-delete');\n  } else {\n    if (textQueuedModal === 'DELETE FROM QUEUE') {\n      localStorageQueue = localStorageQueue.filter(\n        item => item.id !== infoFilm.id\n      );\n      localStorage.setItem('queue', JSON.stringify(localStorageQueue));\n      Notiflix.Notify.info(\n        `Фильм ${infoFilm.title || infoFilm.name} удален из QUEUE`,\n        {\n          position: 'center-top',\n          clickToClose: true,\n          timeout: 2500,\n        }\n      );\n\n      refs.queueModal.textContent = 'ADD TO QUEUE';\n      if (refs.queueModal.classList.contains('modal-button-delete'))\n        refs.queueModal.classList.remove('modal-button-delete');\n      if (!refs.queueModal.classList.contains('modal-button-add-queue'))\n        refs.queueModal.classList.add('modal-button-add-queue');\n\n      if (currentPage === 'queue') {\n        onCloseModal();\n        //! Очищаем контейнер:\n        clearMovieContainer();\n        appendWatchedQueueMarkup(localStorageQueue);\n      }\n    }\n  }\n}\n\n//* -------------------------- Ф-ция_6, для работы с MY LIBRARY или кнопкой WATCHED: ----------------------\nfunction onMyLibraryWatched() {\n  currentPage = 'watched';\n  //! Очищаем контейнер:\n  clearMovieContainer();\n  //! Перезаписываем в локальную переменную (results) значение всего (localStorage)\n  const results = JSON.parse(localStorage.getItem('watched')) ?? [];\n  //! Рисование интерфейса\n  appendWatchedQueueMarkup(results);\n}\n\n//* -------------------------- Ф-ция_7, для работы с кнопкой QUEUEв MY LIBRARY : ----------------------\nfunction onQueue() {\n\n  //! Назначаем тип станицы QUEUE для логики работы кнопок МОДАЛКИ\n  currentPage = 'queue';\n  //! Очищаем контейнер:\n  clearMovieContainer();\n\n  //! Перезаписываем в локальную переменную (results) значение всего (localStorage)\n  const results = JSON.parse(localStorage.getItem('queue')) ?? [];\n\n  //! Рисование интерфейса\n  appendWatchedQueueMarkup(results);\n}\n\n//* ---------------------------------------------- Функции-вызывалки ;-) ----------------------------------------------\n//! ++++++++++++++ Ф-ция, к-рая проверяет значения переменной (currentPage) для определения типа запроса в кнопке LOAD MORE ++++++++++++++\nasync function checkResults() {\n  if (currentPage === 'home-Filmoteka') {\n    const results = await themoviedbApiService.getTrendingAllDay();\n    films = results;\n  } else {\n    if (currentPage === 'Movie search') {\n      const results = await themoviedbApiService.getSearchMovies();\n      films = results;\n    } else {\n      return;\n    }\n  }\n}\n\n\n//! ++++++++++++++ Ф-ция, к-рая очищает контейнер при новом вводе данных в input form: ++++++++++++++\nfunction clearMovieContainer() {\n  refs.moviesCards.innerHTML = '';\n}\n\n//! ++++++++++++++ Ф-ция, к-рая очищает контейнер МОДАЛКИ: ++++++++++++++\nfunction clearModalContainer() {\n  refs.InfoMovie.innerHTML = '';\n}\n\n//! ++++++++++++++ Ф-ция, к-рая  прверяет results на пустой массив: ++++++++++++++\nfunction onCloseModal() {\n  window.removeEventListener('keydown', onEscKeyPress);\n  document.body.classList.remove('show-modal');\n  //! Очищаем контейнер МОДАЛКИ:\n  clearModalContainer();\n}\n\nfunction onBackdropClick(event) {\n  if (event.currentTarget === event.target) {\n    onCloseModal();\n  }\n}\n\nfunction onEscKeyPress(event) {\n  if (event.code === 'Escape') {\n    onCloseModal();\n  }\n}\n//!_____________________________________________________________________\n\n//! +++++++++ Создаем слушателей на кнопках <ADD TO WATCHED> и <ADD TO QUEUE> для МОДАЛКИ ++++++++++++++\nfunction addIventListenerModalBtn() {\n  refs.watchedModal = document.querySelector(\n    'button[data-action=\"modal-add-watched\"]'\n  );\n  refs.queueModal = document.querySelector(\n    'button[data-action=\"modal-add-queue\"]'\n  );\n\n  refs.watchedModal.addEventListener('click', onWatchedModal);\n  refs.queueModal.addEventListener('click', onQueueModal);\n}\n\n\n//* --------------------------------------- Функции-разметки ---------------------------------------------------------\n//! +++++++++++++++++++++++++++++ Markup WATCHED и QUEUE ++++++++++++++++++++++++++++++++++++++++++++++\n//*  Ф-ция-then, к-рая отрисовывает интерфейс ВСЕХ карточек на странице:\nfunction appendWatchedQueueMarkup(results) {\n  //!   Добавляем новую разметку в div-контейнер с помощью insertAdjacentHTML:\n  refs.moviesCards.insertAdjacentHTML(\n    'beforeend',\n    createWatchedQueueCardsMarkup(results)\n  );\n}\n\n//*   Ф-ция, к-рая создает новую разметку для ОДНОЙ карточки из ВСЕХ карточек:\nfunction createWatchedQueueCardsMarkup(results) {\n  return results\n    .map(\n      ({\n        id,\n        poster_path,\n        title,\n        name,\n        genres,\n        first_air_date,\n        release_date,\n        vote_average,\n      }) => {\n        //? Получаем строку со всеми жанрами\n        const genresAllOneFilm = genres.map(item => item.name).join(', ');\n\n        //? Получаем значение года из строки даты:\n        const date = first_air_date || release_date || '???? - ?? - ??';\n        const yearDate = date.substr(0, 4);\n\n        //?Убираем лишние знаки после запятой\n        const voteAverage = vote_average.toFixed(1);\n\n        //? Делаем заглавныее буквы в названии фильма (пока НЕ РАБОТАЕТ capitalsName)\n        let capitalsTitle = title;\n        if (title) {\n          capitalsTitle = title.toUpperCase();\n        }\n\n        let capitalsName = name;\n        if (name) {\n          const capitalsName = name.toUpperCase();\n        }\n\n        return `\n                <li class=\"gallery__item\" key=${id}>\n                    <img class=\"gallery__img\" src=\"https://image.tmdb.org/t/p/w780${poster_path}\" alt=\"${title || name\n          }\" />\n\n                    <div class=\"gallery__thumb\">\n                        <h2 class=\"gallery__title\">${capitalsTitle || capitalsName}</h2>\n                        <p class=\"gallery__text\">${genresAllOneFilm} &nbsp|&nbsp ${yearDate}&nbsp &nbsp${voteAverage}</p>\n                    </div>\n                </li>\n                `;\n      }\n    )\n    .join('');\n}\n\n//! +++++++++++++++++++++++++++++ Markup infoFilm ++++++++++++++++++++++++++++++++++++++++++++++\n//*  Ф-ция-then, к-рая отрисовывает интерфейс ОДНОГО фильма в МОДАЛКЕ:\nfunction appendInfoMovieMarkup(infoFilm) {\n  //!   Добавляем новую разметку в div-контейнер с помощью insertAdjacentHTML:\n  refs.InfoMovie.insertAdjacentHTML(\n    'afterbegin',\n    createInfoMovieMarkup(infoFilm)\n  );\n}\n\n//! --------------------------------------------------------------------------------------------\n//*   Ф-ция, к-рая создает новую разметку ОДНОГО фильма в МОДАЛКЕ:\nfunction createInfoMovieMarkup(infoFilm) {\n  const {\n    id,\n    poster_path,\n    title,\n    name,\n    vote_average,\n    vote_count,\n    popularity,\n    original_title,\n    original_name,\n    genres,\n    overview,\n  } = infoFilm;\n\n  //? Получаем строку со всеми жанрами\n  const genresAllOneFilm = genres.map(item => item.name).join(', ');\n\n  //? Делаем заглавныее буквы в названии фильма (пока НЕ РАБОТАЕТ capitalsName)\n  let capitalsTitle = title;\n  if (title) {\n    capitalsTitle = title.toUpperCase();\n  }\n\n  let capitalsName = name;\n  if (name) {\n    const capitalsName = name.toUpperCase();\n  }\n\n  return `\n        <img class=\"modal-img\" src=\"https://image.tmdb.org/t/p/w300${poster_path}\" alt=\"${title || name\n    }\" />\n        \n        <div class=\"modal-сontent\">\n            <h3 class=\"modal-title-film\">${capitalsTitle || capitalsName}</h3>\n            <table class=\"modal-info\">\n                <tbody>\n                    <tr>\n                        <td class=\"modal-key\">Vote/Votes</td>\n                        <td class=\"modal-parametr\"><span class=\"modal-parametr-vote\">${vote_average}</span> / ${vote_count}</td>\n                    </tr>\n                    <tr>\n                        <td class=\"modal-key\">Popularity</td>\n                        <td class=\"modal-parametr\">${popularity}</td>\n                    </tr>\n                    <tr>\n                        <td class=\"modal-key\">Original Title</td>\n                        <td class=\"modal-parametr\">${original_title || original_name\n    }</td>\n                    </tr>\n                    <tr>\n                        <td class=\"modal-key\">Genre</td>\n                        <td class=\"modal-parametr\">${genresAllOneFilm}</td>\n                    </tr>\n                </tbody>\n            </table>\n            <div class=\"modal-about-film\">\n                <h5 class=\"modal-about-title\">ABOUT</h5>\n                <span class=\"modal-about-text\">${overview}</span>\n            </div>\n        \n            <div class=\"modal-button\" data-action=\"library-btn\">\n                <button type=\"button\" class=\"modal-button-add-watched\" data-action=\"modal-add-watched\">ADD TO WATCHED</button>\n\n                <button type=\"button\" class=\"modal-button-add-queue\" data-action=\"modal-add-queue\">ADD TO QUEUE</button>\n\n            </div>\n        </div>\n    `;\n}\n\n// --KHARLAMOVA TETIANA----------------МОДАЛЬНЕ ВІКНО З КОМАНДОЮ----------------------------------\n(() => {\n  const refsModalTeam = {\n    openModalTeamLink: document.querySelector('.team-link'),\n    closeModalTeamBtn: document.querySelector('.team-close-btn'),\n    modalTeam: document.querySelector('.backdrop-team'),\n    body: document.querySelector('body'),\n  };\n  const { openModalTeamLink, closeModalTeamBtn, modalTeam, body } =\n    refsModalTeam;\n  openModalTeamLink.addEventListener('click', onOpenModalTeam);\n  closeModalTeamBtn.addEventListener('click', onCloseModalTeam);\n  modalTeam.addEventListener('click', onBackdropTeamClick);\n\n  function onCloseModalTeam(e) {\n    modalTeam.classList.toggle('is-hidden');\n    body.classList.toggle('no-scroll');\n    window.removeEventListener('keydown', onEscKeyPress);\n  }\n\n  function onOpenModalTeam(e) {\n    window.addEventListener('keydown', onEscKeyPress);\n    modalTeam.classList.toggle('is-hidden');\n    body.classList.toggle('no-scroll');\n  }\n  function onEscKeyPress(e) {\n    if (e.key === 'Escape') {\n      onCloseModalTeam();\n    }\n  }\n\n  function onBackdropTeamClick(e) {\n    if (e.currentTarget === e.target) {\n      onCloseModalTeam();\n    }\n  }\n})();\n// -----------------------END OF МОДАЛЬНЕ ВІКНО З КОМАНДОЮ----------------------------\n"],"names":["$eWCmQ","parcelRequire","$fc8e7c71b3b7ed96$var$refs","moviesCards","document","querySelector","InfoMovie","homeBtn","filmotekaBtn","myLibraryBtn","movieDetails","closeModalBtn","backdrop","resultNotSuccessful","watchedQueueHeader","watchedHeader","queueHeader","addEventListener","$fc8e7c71b3b7ed96$var$onMyLibraryWatched","async","event","target","closest","itemId","$fc8e7c71b3b7ed96$var$idFilms","Number","getAttribute","console","log","id","film1","getQueueData","getWatchedData","find","film","$fc8e7c71b3b7ed96$var$infoFilm","findFilmByIdLs","watched","JSON","parse","localStorage","getItem","error","$3oXzi","default","startSpinner","$fc8e7c71b3b7ed96$var$currentPage","$fc8e7c71b3b7ed96$var$localStorageWatched","option","$fc8e7c71b3b7ed96$var$localStorageQueue","window","$fc8e7c71b3b7ed96$var$onEscKeyPress","body","classList","add","removeSpinner","infoFilm1","insertAdjacentHTML","infoFilm2","poster_path","title","name","vote_average","vote_count","popularity","original_title","original_name","genres","overview","genresAllOneFilm","map","item","join","capitalsTitle","toUpperCase","capitalsName","$fc8e7c71b3b7ed96$var$createInfoMovieMarkup","watchedModal","queueModal","$fc8e7c71b3b7ed96$var$onWatchedModal","$fc8e7c71b3b7ed96$var$onQueueModal","$bGAxz","$fc8e7c71b3b7ed96$var$onCloseModal","currentTarget","$fc8e7c71b3b7ed96$var$clearMovieContainer","$fc8e7c71b3b7ed96$var$appendWatchedQueueMarkup","textWatchedModal","textContent","$parcel$interopDefault","Notify","warning","position","clickToClose","timeout","contains","remove","setItem","stringify","success","filter","info","textQueuedModal","innerHTML","removeEventListener","code","results","first_air_date","release_date","yearDate","substr","voteAverage","toFixed","$fc8e7c71b3b7ed96$var$createWatchedQueueCardsMarkup","refsModalTeam","openModalTeamLink","closeModalTeamBtn","modalTeam","onCloseModalTeam","e","toggle","onEscKeyPress1","key"],"version":3,"file":"my-library.fb89c59f.js.map"}
{"mappings":"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","sources":["src/my-library.js"],"sourcesContent":["import Notiflix from 'notiflix';\n//?  Импорт spinner (Loader ==> isLoadin)\nimport spinner from './js/preLoader';\n\n//* +++++++++++++++++++++++++++++++++++ Импорты файлов ++++++++++++++++++++++++++++++++++++++++++++\nfunction getRefsLibrary() {\n  return {\n\n    //! Получаем ссылку на div-контейнер для разметки карточек изображений:\n    moviesCards: document.querySelector('ul[data-action=\"movies-cards\"]'),\n    //! Получаем ссылку на div-контейнер для разметки карточек изображений:\n    InfoMovie: document.querySelector('div[data-action=\"modal-markup\"]'),\n    //! Получаем ссылку на кнопку HOME:\n    homeBtn: document.querySelector('a[data-action=\"button-home\"]'),\n    //! Получаем ссылку на кнопку Filmoteka:\n    filmotekaBtn: document.querySelector('a[data-action=\"button-filmoteka\"]'),\n    //! Получаем ссылку на кнопку MY LIBRARY:\n    myLibraryBtn: document.querySelector('a[data-action=\"button-mylibrary\"]'),\n    //! Получаем ссылку на <section class=\"section-hero\"> ==> на poster_path:\n    movieDetails: document.querySelector('section[data-action=\"section-hero\"]'),\n\n    //! Получаем ссылки для модалки:\n    // openModalBtn: document.querySelector('[data-action=\"open-modal\"]'), //! ----- для тестирования\n    closeModalBtn: document.querySelector('[data-action=\"close-modal\"]'),\n    backdrop: document.querySelector('.js-backdrop'),\n\n    //! Получаем ссылку на строку предупреждения об отсутствии фильмов:\n    resultNotSuccessful: document.querySelector('[data-action=\"search-alert\"]'),\n    //! Получаем ссылку на блок кнопок WATCHED и QUEUE в header:\n    watchedQueueHeader: document.querySelector('[data-action=\"library-btn\"]'),\n    //! Получаем ссылку на кнопоку WATCHED в header:\n    watchedHeader: document.querySelector('[data-action=\"library-watched\"]'),\n\n    //! Получаем ссылку на кнопоку QUEUE в header:\n    queueHeader: document.querySelector('[data-action=\"library-queue\"]'),\n  };\n}\n//! Создаем объект всех ссылок refs.*\nconst refs = getRefsLibrary();\n// console.log(\"refs:\", refs); //!\n//* +++++++++++++++++++++++++++++++ Создаем ВСЕХ слушателей +++++++++++++++++++++++++++++++++++++++++\n\n//!  Создаем слушателя событий на поле ввода данных - input form:\n// refs.searchForm.addEventListener('submit', onFormMoviesSearch); //! +-+-+-\n\n//!  Создаем слушателя событий на кнопке LOAD MORE:\n// loadMoreBtn.refs.button.addEventListener('click', onLoadMore);\n\n//! Создаем слушателя событий на кнопке HOME:\n// refs.homeBtn.addEventListener('click', onHome);\n\n//! Создаем слушателя событий на кнопке Filmoteka:\n// refs.filmotekaBtn.addEventListener('click', onHome);\n\n//! Создаем слушателя событий на кнопке MY LIBRARY:\nrefs.myLibraryBtn.addEventListener('click', onMyLibraryWatched);\n\n//! Создаем слушателя событий на <section class=\"section-hero\"> ==> на poster_path:\nrefs.movieDetails.addEventListener('click', onMovieDetails);\n\n//! +++++++++++++++++++ Создаем слушателей для МОДАЛКИ ++++++++++++++++++++++++\n// refs.openModalBtn.addEventListener('click', onOpenModal); //? ----- для тестирования\nrefs.closeModalBtn.addEventListener('click', onCloseModal);\nrefs.backdrop.addEventListener('click', onBackdropClick);\n\n//! +++++++++ Создаем слушателей на кнопках <ADD TO WATCHED> и <ADD TO QUEUE> для МОДАЛКИ ++++++++++++++\n// refs.watchedModal.addEventListener('click', onWatchedModal); //!!! +-+-+-+-\n// refs.queueModal.addEventListener('click', onQueueModal); //!!! +-+-+-+-\nconsole.log('Слушатели_refs.watchedModal:', refs.watchedModal); //!\nconsole.log('Слушатели_refs.queueModal:', refs.queueModal); //!\n//! Импортируем ГОТОВЫХ слушателей на кнопках <ADD TO WATCHED> и <ADD TO QUEUE> для МОДАЛКИ\n// import addIventListenerModalBtn from './js/addIventListenerModalBtn.js'; //! пока не надо, поключена ЛОКАЛЬНО\n\n//! ++++ Создаем слушателей на кнопках WATCHED и QUEUE для страницы MY LIBRARY +++++++\nrefs.watchedHeader.addEventListener('click', onMyLibraryWatched);\nrefs.queueHeader.addEventListener('click', onQueue);\n\n//! ++++++++++++++++++ ПОКАЗЫВАЕМ/ПРЯЧЕМ элементы разметки ++++++++++++++++++++\n//? ПОКАЗЫВАЕМ форму со строкой инпута:\n// refs.searchFormAlert.hidden = true; //! ПРЯЧЕМ\n// refs.searchFormAlert.hidden = false; //! ПОКАЗЫВАЕМ  +-+-+-+-\n\n//? ПРЯЧЕМ строку предупреждения об отсутствии фильмов:\n// refs.resultNotSuccessful.hidden = true;\n\n//? ПРЯЧЕМ блок кнопок WATCHED и QUEUE в header:\n// refs.watchedQueueHeader.hidden = true; +-+-+-+-\n\n//* +++++++++++++++++++++++++++++++ Создаем ГЛОБАЛЬНЫЕ переменные +++++++++++++++++++++++++++++++++++++++++\n\n//! Создаем глобальную переменную (films) для хранения значение всей (results)\nlet films = [];\n\n//! Создаем глобальную переменную (idFilms) для хранения idF одного фильма\nlet idFilms = 1;\n\n//! Создаем глобальную переменную (infoFilm) для хранения полной информации об одном фильме\nlet infoFilm = null;\n\n//! Переменная для определения типа запроса в кнопке LOAD MORE\n//! и типа станиц WATCHED и QUEUE\nlet currentPage = '';\n\n//! Переменные для хранения массива объектов фильмов для станиц WATCHED и QUEUE\nlet localStorageWatched = JSON.parse(localStorage.getItem('watched')) ?? [];\nlet localStorageQueue = JSON.parse(localStorage.getItem('queue')) ?? [];\n\n//* +++++++++++++++++++++++++++++++++++++++ Блок Функций  +++++++++++++++++++++++++++++++++++++++++++++++++\n\n//? Тестируем-консолим тип жанра по его id\n// console.log(\"genres:\", genres); //!\n// const genreName = convertingIdToGenre(10770);\n// console.log(\"genreName:\", genreName); //!\n\n//!!!!!! Загрузка популярных фильмов на главную (первую) страницу (без нажатия на кнопки HOME или Filmoteka)\n// onHome();\n\n//* -------------------------- Ф-ция-запрос_1, к-рая прослушивает события на кнопке HOME: ----------------------\n\n//* ---------- Ф-ция-запрос_2, к-рая прослушивает события на поле ввода данных - input form:-------\n\n//* -------------------------- Ф-ция-запрос_3, к-рая запрашивает полную информацию об одном фильме: ----------------------\n//! +++ Запрос полной информации о фильме для МОДАЛКИ +++\nasync function onMovieDetails(event) {\n  console.log('Вешаю слушателя на открытие МОДАЛКИ (onMovieDetails)'); //!\n  //? !!!!!!! ПОЛУЧАЕМ (id) фильма по клику на карточке фильма !!!!!!!!!!!!!!!\n  if (event.target.closest('li')) {\n    const itemId = event.target.closest('li');\n    // console.log(\"itemId:\", itemId); //!\n    idFilms = Number(itemId.getAttribute('key')); //!!! вот ОН, РОДНОЙ!!!\n    console.log('idFilms:', idFilms); //!\n  } else return;\n  //?__________ ПОЛУЧАЕМ (id) фильма по клику на карточке фильма __________\n\n  //! ПОКАЗЫВАЕМ Spinner\n  spinner.startSpinner();\n\n  //! ==> Делаем запрос-3 полной информации о фильме для МОДАЛКИ.\n  try {\n    const results = await themoviedbApiService.getMovieDetails(idFilms);\n    //! Очищаем контейнер МОДАЛКИ:\n    clearModalContainer();\n    //! Перезаписываем в глобальную переменную (films) значение всей (results)\n    infoFilm = results;\n  } catch (error) {\n    //! Очищаем контейнер МОДАЛКИ:\n    clearModalContainer();\n    //! Прячем Spinner\n    spinner.removeSpinner();\n    //! Очищаем контейнер переменную (films):\n    infoFilm = null;\n    console.log(error); //!\n    Notiflix.Notify.failure(`Ошибка запроса: ${error.message}`, {\n      timeout: 3500,\n    });\n  }\n  //? ------- Получаем и консолим все данные для рендера разметки главной страницы -------\n  // console.log(\"getMovieDetails ==> infoFilm:\", infoFilm); //!\n  // const titleOrName = infoFilm.title || infoFilm.name;\n  // console.log(\"titleOrName:\", titleOrName);\n  // console.log(\"id:\", infoFilm.id); //!\n  // console.log(\"poster_path:\", infoFilm.poster_path);\n  // console.log(\"Vote:\", infoFilm.vote_average);\n  // console.log(\"Votes:\", infoFilm.vote_count);\n  // console.log(\"Popularity:\", infoFilm.popularity);\n  // const originalTitleOrName = infoFilm.original_title || infoFilm.original_name;\n  // console.log(\"Original Title:\", originalTitleOrName);\n  // const genresAllOneFilm = infoFilm.genres.map(item => item.name).join(\", \");\n  // console.log(\"Genre:\", genresAllOneFilm); //! строка всех жанров\n  // console.log(\"About:\", infoFilm.overview);\n  //?_________________КОНЕЦ Получения и консоли всех данных _____________________\n\n  //! ==> Открываем модалку\n  window.addEventListener('keydown', onEscKeyPress);\n  document.body.classList.add('show-modal');\n\n  //! Прячем Spinner\n  spinner.removeSpinner();\n\n  //! Рисование интерфейса\n  appendInfoMovieMarkup(infoFilm);\n\n  //! Добавляем ГОТОВЫХ слушателей на кнопках <ADD TO WATCHED> и <ADD TO QUEUE> для МОДАЛКИ\n  addIventListenerModalBtn();\n\n  //! Вызываем БЛОК ЛОГИКИ работы кнопок <ADD TO WATCHED> и <ADD TO QUEUE>\n  operationLogicWatchedQueue();\n}\n\n//* -------------- Ф-ция_4, ДОБАВЛЕНИЕ/УДАЛЕНИЕ просмотренных фильмов в localStorage по кноке ADD TO WATCHED: ----------\n//! +++ Запрос полной информации о фильме для МОДАЛКИ +++\nfunction onWatchedModal() {\n  console.log('Вешаю слушателя на кнопку ADD TO WATCHED в МОДАЛКЕ'); //!\n\n  console.log('infoFilm:', infoFilm); //!\n  console.log('infoFilm.id:', infoFilm.id); //!\n\n  console.log('Ф-ция_4_refs.watchedModal ==>:', refs.watchedModal); //!\n\n  const textWatchedModal = refs.watchedModal.textContent;\n  console.log('textWatchedModal ==> начало:', textWatchedModal); //!\n\n  if (textWatchedModal === 'ADD TO WATCHED') {\n    //! Блокировка повторной записи фильма в localStorage (ВРЕМЕННО)\n    if (localStorageWatched.find(option => option.id === infoFilm.id)) {\n      Notiflix.Notify.warning(\n        `Фильм ${infoFilm.title || infoFilm.name} уже есть в WATCHED`,\n        { timeout: 3500 }\n      );\n      refs.watchedModal.textContent = 'DELETE FROM WATCHED';\n      if (refs.watchedModal.classList.contains('colorGreen'))\n        refs.watchedModal.classList.remove('colorGreen');\n      if (!refs.watchedModal.classList.contains('colorRed'))\n        refs.watchedModal.classList.add('colorRed');\n      return;\n    }\n    //! Запись фильма в localStorage\n    localStorageWatched = [...localStorageWatched, infoFilm];\n    console.log('localStorageWatched:', localStorageWatched); //!\n    localStorage.setItem('watched', JSON.stringify(localStorageWatched));\n    Notiflix.Notify.success(\n      `Фильм ${infoFilm.title || infoFilm.name} добавлен в WATCHED`,\n      { timeout: 3500 }\n    );\n    //! Смена названия (textContent) кнопки на \"DELETE FROM WATCHED\"\n    refs.watchedModal.textContent = 'DELETE FROM WATCHED';\n    if (refs.watchedModal.classList.contains('colorGreen'))\n      refs.watchedModal.classList.remove('colorGreen');\n    if (!refs.watchedModal.classList.contains('colorRed'))\n      refs.watchedModal.classList.add('colorRed');\n    console.log('textWatchedModal ==> конец:', textWatchedModal); //!\n  } else {\n    if (textWatchedModal === 'DELETE FROM WATCHED') {\n      localStorageWatched = localStorageWatched.filter(\n        item => item.id !== infoFilm.id\n      );\n      localStorage.setItem('watched', JSON.stringify(localStorageWatched));\n      console.log('Фильм удален из WATCHED'); //!\n      Notiflix.Notify.info(\n        `Фильм ${infoFilm.title || infoFilm.name} удален из WATCHED`,\n        { timeout: 3500 }\n      );\n      refs.watchedModal.textContent = 'ADD TO WATCHED';\n      if (refs.watchedModal.classList.contains('colorRed'))\n        refs.watchedModal.classList.remove('colorRed');\n      if (!refs.watchedModal.classList.contains('colorGreen'))\n        refs.watchedModal.classList.add('colorGreen');\n\n      if (currentPage === 'watched') {\n        console.log('currentPage', currentPage); //!\n        onCloseModal();\n        //! Очищаем контейнер:\n        clearMovieContainer();\n        appendWatchedQueueMarkup(localStorageWatched);\n      }\n    }\n  }\n}\n\n//* ------------------ Ф-ция_5, ДОБАВЛЕНИЕ/УДАЛЕНИЕ просмотренных фильмов в localStorage по кноке ADD TO QUEUE: --------------\n//! +++ Запрос полной информации о фильме для МОДАЛКИ +++\nfunction onQueueModal() {\n  console.log('Вешаю слушателя на кнопку ADD TO QUEUE в МОДАЛКЕ'); //!\n\n  console.log('infoFilm:', infoFilm); //!\n  console.log('infoFilm.id:', infoFilm.id); //!\n\n  const textQueuedModal = refs.queueModal.textContent;\n  console.log('textQueuedModal ==> начало:', textQueuedModal); //!\n\n  if (textQueuedModal === 'ADD TO QUEUE') {\n    //! Блокировка повторной записи фильма в localStorage (ВРЕМЕННО)\n    if (localStorageQueue.find(option => option.id === infoFilm.id)) {\n      Notiflix.Notify.warning(\n        `Фильм ${infoFilm.title || infoFilm.name} уже есть в QUEUE`,\n        { timeout: 3500 }\n      );\n      refs.queueModal.textContent = 'DELETE FROM QUEUE';\n      if (refs.queueModal.classList.contains('colorGreen'))\n        refs.queueModal.classList.remove('colorGreen');\n      if (!refs.queueModal.classList.contains('colorRed'))\n        refs.queueModal.classList.add('colorRed');\n      return;\n    }\n    //! Запись фильма в localStorage\n    localStorageQueue = [...localStorageQueue, infoFilm];\n    console.log('localStorageQueue:', localStorageQueue); //!\n    localStorage.setItem('queue', JSON.stringify(localStorageQueue));\n    Notiflix.Notify.success(\n      `Фильм ${infoFilm.title || infoFilm.name} добавлен в QUEUE`,\n      { timeout: 3500 }\n    );\n    //! Смена названия (textContent) кнопки на \"DELETE FROM QUEUE\"\n    refs.queueModal.textContent = 'DELETE FROM QUEUE';\n    if (refs.queueModal.classList.contains('colorGreen'))\n      refs.queueModal.classList.remove('colorGreen');\n    if (!refs.queueModal.classList.contains('colorRed'))\n      refs.queueModal.classList.add('colorRed');\n    console.log('textQueuedModal ==> конец:', textQueuedModal); //!\n  } else {\n    if (textQueuedModal === 'DELETE FROM QUEUE') {\n      localStorageQueue = localStorageQueue.filter(\n        item => item.id !== infoFilm.id\n      );\n      localStorage.setItem('queue', JSON.stringify(localStorageQueue));\n      console.log('Фильм удален из QUEUE');\n      Notiflix.Notify.info(\n        `Фильм ${infoFilm.title || infoFilm.name} удален из QUEUE`,\n        { timeout: 3500 }\n      );\n      refs.queueModal.textContent = 'ADD TO QUEUE';\n      if (refs.queueModal.classList.contains('colorRed'))\n        refs.queueModal.classList.remove('colorRed');\n      if (!refs.queueModal.classList.contains('colorGreen'))\n        refs.queueModal.classList.add('colorGreen');\n      if (currentPage === 'queue') {\n        console.log('currentPage', currentPage); //!\n        onCloseModal();\n        //! Очищаем контейнер:\n        clearMovieContainer();\n        appendWatchedQueueMarkup(localStorageQueue);\n      }\n    }\n  }\n}\n\n//* -------------------------- Ф-ция_6, для работы с MY LIBRARY или кнопкой WATCHED: ----------------------\nfunction onMyLibraryWatched() {\n  console.log('Вешаю слушателя на кнопку my-library.js==>WATCHED'); //!\n\n  // refs.watchedModal.textContent = \"DELETE FROM WATCHED\";\n  //! Назначаем тип станицы WATCHED для логики работы кнопок МОДАЛКИ\n  currentPage = 'watched';\n\n  //! ПРЯЧЕМ строку предупреждения об отсутствии фильмов:\n  // refs.resultNotSuccessful.hidden = true;\n\n  //! ПРЯЧЕМ форму со строкой инпута:\n  // refs.searchFormAlert.hidden = true;\n\n  //! ПОКАЗЫВАЕМ блок кнопок WATCHED и QUEUE в header:\n  // refs.watchedQueueHeader.hidden = false;\n\n  //! Кнопка LOAD MORE => показываем и отключаем\n  // loadMoreBtn.show();\n  // loadMoreBtn.hide(); //! Временно => ПРЯЧЕМ\n  // loadMoreBtn.disable();\n\n  //! Очищаем контейнер:\n  clearMovieContainer();\n\n  //! Перезаписываем в локальную переменную (results) значение всего (localStorage)\n  const results = JSON.parse(localStorage.getItem('watched')) ?? [];\n  console.log('results:', results); //!\n\n  //! Рисование интерфейса\n  appendWatchedQueueMarkup(results);\n\n  //! Кнопка LOAD MORE => включаем\n  // loadMoreBtn.enable();\n}\n\n//* -------------------------- Ф-ция_7, для работы с кнопкой QUEUEв MY LIBRARY : ----------------------\nfunction onQueue() {\n  console.log('Вешаю слушателя на кнопку my-library.js==>QUEUE'); //!\n\n  //! Назначаем тип станицы QUEUE для логики работы кнопок МОДАЛКИ\n  currentPage = 'queue';\n\n  //! ПРЯЧЕМ строку предупреждения об отсутствии фильмов:\n  // refs.resultNotSuccessful.hidden = true;\n\n  //! ПРЯЧЕМ форму со строкой инпута:\n  // refs.searchFormAlert.hidden = true;\n\n  //! ПОКАЗЫВАЕМ блок кнопок WATCHED и QUEUE в header:\n  // refs.watchedQueueHeader.hidden = false;\n\n  //! Кнопка LOAD MORE => показываем и отключаем\n  // loadMoreBtn.show();\n  // loadMoreBtn.hide(); //! Временно => ПРЯЧЕМ\n  // loadMoreBtn.disable();\n\n  //! Очищаем контейнер:\n  clearMovieContainer();\n\n  //! Перезаписываем в локальную переменную (results) значение всего (localStorage)\n  const results = JSON.parse(localStorage.getItem('queue')) ?? [];\n  console.log('results:', results); //!\n\n  //! Рисование интерфейса\n  appendWatchedQueueMarkup(results);\n\n  //! Кнопка LOAD MORE => включаем\n  // loadMoreBtn.enable();\n}\n\n//* ++++++++++++++++++++++++++++++++ Кнопка LOAD MORE (для Ф-ции-запрос ==> ОБЩАЯ - для 1 и 2) ++++++++++++++++++++++++++++++++++++++++++++\n//!  Ф-ция, к-рая прослушивает события на кнопке LOAD MORE:\nasync function onLoadMore() {\n  //! Кнопка LOAD MORE => ВЫключаем\n  // loadMoreBtn.disable()\n\n  //! проверяеm значения переменной (currentPage)\n  //! и СРАЗУ получаем в переменной films нужный массив объектов\n  //! для отрисовки следующих 20 фильмов\n  await checkResults();\n\n  // console.log(\"onLoadMore ==> films:\", films); //!\n\n  //! Очищаем контейнер:\n  clearMovieContainer();\n\n  //!  Проверка results на ОКОНЧАНИЕ КОЛЛЕКЦИИИ\n  // checkResultsForEnd(endOfCollection);\n\n  //! Рисование интерфейса\n  appendMoviesMarkup(films);\n\n  //! Кнопка LOAD MORE => включаем\n  // loadMoreBtn.enable();\n}\n//* +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n\n//* ---------------------------------------------- Функции-вызывалки ;-) ----------------------------------------------\n//! ++++++++++++++ Ф-ция, к-рая проверяет значения переменной (currentPage) для определения типа запроса в кнопке LOAD MORE ++++++++++++++\nasync function checkResults() {\n  if (currentPage === 'home-Filmoteka') {\n    const results = await themoviedbApiService.getTrendingAllDay();\n    films = results;\n    // console.log(\"home-Filmoteka ==> films:\", films); //!\n  } else {\n    if (currentPage === 'Movie search') {\n      const results = await themoviedbApiService.getSearchMovies();\n      films = results;\n      // console.log(\"Movie search ==> films:\", films); //!\n    } else {\n      return;\n    }\n  }\n}\n\n//! ++++++++++++++ Ф-ция, к-рая получает id жанра и возвращает тип жанра ++++++++++++++\n\n//! ++++++++++++++ Ф-ция, к-рая очищает контейнер при новом вводе данных в input form: ++++++++++++++\nfunction clearMovieContainer() {\n  refs.moviesCards.innerHTML = '';\n}\n\n//! ++++++++++++++ Ф-ция, к-рая очищает контейнер МОДАЛКИ: ++++++++++++++\nfunction clearModalContainer() {\n  refs.InfoMovie.innerHTML = '';\n}\n\n//! ++++++++++++++ Ф-ция, к-рая  прверяет results на пустой массив: ++++++++++++++\n\n//! +++++++++++++++++++++++ Функции для МОДАЛКИ +++++++++++++++++++++++++++\n//? ----- для тестирования открытия модалки по кнопке\n// function onOpenModal() {\n//     window.addEventListener('keydown', onEscKeyPress);\n//     document.body.classList.add('show-modal');\n// }\n\nfunction onCloseModal() {\n  window.removeEventListener('keydown', onEscKeyPress);\n  document.body.classList.remove('show-modal');\n  //! Очищаем контейнер МОДАЛКИ:\n  clearModalContainer();\n}\n\nfunction onBackdropClick(event) {\n  // console.log(event.currentTarget); //!\n  // console.log(event.target); //!\n  if (event.currentTarget === event.target) {\n    // console.log('Кликнули именно в бекдроп!!!!'); //!\n    onCloseModal();\n  }\n}\n\nfunction onEscKeyPress(event) {\n  // console.log(event.code); //!\n  // const ESC_KEY_CODE = 'Escape';\n  // const isEscKey = event.code === ESC_KEY_CODE;\n  // if (isEscKey) {\n  if (event.code === 'Escape') {\n    onCloseModal();\n  }\n}\n//!_____________________________________________________________________\n\n//! +++++++++ Создаем слушателей на кнопках <ADD TO WATCHED> и <ADD TO QUEUE> для МОДАЛКИ ++++++++++++++\nfunction addIventListenerModalBtn() {\n  refs.watchedModal = document.querySelector(\n    'button[data-action=\"modal-add-watched\"]'\n  );\n  refs.queueModal = document.querySelector(\n    'button[data-action=\"modal-add-queue\"]'\n  );\n\n  console.log('addIventListenerModalBtn_refs.watchedModal:', refs.watchedModal); //!\n  console.log('addIventListenerModalBtn_refs.queueModal:', refs.queueModal); //!\n\n  refs.watchedModal.addEventListener('click', onWatchedModal);\n  refs.queueModal.addEventListener('click', onQueueModal);\n\n  //! -----------------------------------------------------------------------------\n  // refs.watchedModal.addEventListener('click', () => {\n  //     console.log(\"Вешаю ГОТОВОГО слушателя на кнопку ADD TO WATCHED в МОДАЛКЕ\"); //!\n  // });\n\n  // refs.queueModal.addEventListener('click', () => {\n  //     console.log(\"Вешаю ГОТОВОГО слушателя на кнопку ADD TO QUEUE в МОДАЛКЕ\"); //!\n  // });\n}\n\n//!+++++++++++++ БЛОК ЛОГИКИ работы кнопок <ADD TO WATCHED> и <ADD TO QUEUE> ++++++++++++++++++\nfunction operationLogicWatchedQueue() {\n  console.log('БЛОК ЛОГИКИ_refs.watchedModal ==>:', refs.watchedModal); //!\n  console.log('БЛОК ЛОГИКИ_refs.queueModal ==>:', refs.queueModal); //!\n  //! Устанвливаем начальные значения textContent для кнопок WATCHED и QUEUE в модалке\n  //! в зависимости от того, на какой странице находится пользователь\n  refs.watchedModal.textContent = 'ADD TO WATCHED';\n  if (refs.watchedModal.classList.contains('colorRed'))\n    refs.watchedModal.classList.remove('colorRed');\n  if (!refs.watchedModal.classList.contains('colorGreen'))\n    refs.watchedModal.classList.add('colorGreen');\n  if (currentPage === 'watched') {\n    refs.watchedModal.textContent = 'DELETE FROM WATCHED';\n    if (refs.watchedModal.classList.contains('colorGreen'))\n      refs.watchedModal.classList.remove('colorGreen');\n    if (!refs.watchedModal.classList.contains('colorRed'))\n      refs.watchedModal.classList.add('colorRed');\n  }\n  refs.queueModal.textContent = 'ADD TO QUEUE';\n  if (refs.queueModal.classList.contains('colorRed'))\n    refs.queueModal.classList.remove('colorRed');\n  if (!refs.queueModal.classList.contains('colorGreen'))\n    refs.queueModal.classList.add('colorGreen');\n  refs.queueModal.classList.add('colorGreen');\n  if (currentPage === 'queue') {\n    refs.queueModal.textContent = 'DELETE FROM QUEUE';\n    if (refs.queueModal.classList.contains('colorGreen'))\n      refs.queueModal.classList.remove('colorGreen');\n    if (!refs.queueModal.classList.contains('colorRed'))\n      refs.queueModal.classList.add('colorRed');\n  }\n}\n\n//* --------------------------------------- Функции-разметки ---------------------------------------------------------\n//! +++++++++++++++++++++++++++++ Markup WATCHED и QUEUE ++++++++++++++++++++++++++++++++++++++++++++++\n//*  Ф-ция-then, к-рая отрисовывает интерфейс ВСЕХ карточек на странице:\nfunction appendWatchedQueueMarkup(results) {\n  //!   Добавляем новую разметку в div-контейнер с помощью insertAdjacentHTML:\n  refs.moviesCards.insertAdjacentHTML(\n    'beforeend',\n    createWatchedQueueCardsMarkup(results)\n  );\n}\n\n//! --------------------------------------------------------------------------------------------\n//*   Ф-ция, к-рая создает новую разметку для ОДНОЙ карточки из ВСЕХ карточек:\nfunction createWatchedQueueCardsMarkup(results) {\n  console.log('results:', results);\n  return results\n    .map(\n      ({\n        id,\n        poster_path,\n        title,\n        name,\n        genres,\n        first_air_date,\n        release_date,\n        vote_average,\n      }) => {\n        //? Получаем строку со всеми жанрами\n        const genresAllOneFilm = genres.map(item => item.name).join(', ');\n        // console.log(\"genresAllOneFilm:\", genresAllOneFilm); //!\n\n        //? Получаем значение года из строки даты:\n        const date = first_air_date || release_date || '???? - ?? - ??';\n        // console.log(\"date:\", date); //!\n        const yearDate = date.substr(0, 4); //! значение года из строки даты:\n        // console.log(\"yearDate:\", yearDate); //!\n\n        //?Убираем лишние знаки после запятой\n        const voteAverage = vote_average.toFixed(1);\n        // console.log(\"voteAverage:\", voteAverage); //!\n\n        //? Делаем заглавныее буквы в названии фильма (пока НЕ РАБОТАЕТ capitalsName)\n        let capitalsTitle = title;\n        if (title) {\n          capitalsTitle = title.toUpperCase();\n          // const title = title.toUpperCase();\n          // console.log(\"capitalsTitle:\", capitalsTitle); //!\n        }\n\n        let capitalsName = name;\n        if (name) {\n          const capitalsName = name.toUpperCase(); //!!! тут ошибка сделана СПЕЦИАЛЬНО!!!\n          // const name = name.toUpperCase();\n          // console.log(\"capitalsName:\", capitalsName); //!\n        }\n\n        return `\n                <li key=${id}>\n                    <img src=\"https://image.tmdb.org/t/p/w780${poster_path}\" alt=\"${\n          title || name\n        }\" />\n\n                    <div>\n                        <h2>${capitalsTitle || capitalsName}</h2>\n                        <h3>${genresAllOneFilm} &nbsp|&nbsp ${yearDate}&nbsp &nbsp${voteAverage}</h3>\n                    </div>\n                </li>\n                `;\n      }\n    )\n    .join('');\n}\n\n//! +++++++++++++++++++++++++++++ Markup infoFilm ++++++++++++++++++++++++++++++++++++++++++++++\n//*  Ф-ция-then, к-рая отрисовывает интерфейс ОДНОГО фильма в МОДАЛКЕ:\nfunction appendInfoMovieMarkup(infoFilm) {\n  //!   Добавляем новую разметку в div-контейнер с помощью insertAdjacentHTML:\n  refs.InfoMovie.insertAdjacentHTML(\n    'afterbegin',\n    createInfoMovieMarkup(infoFilm)\n  );\n\n  //! Добавляем ГОТОВЫХ слушателей на кнопках <ADD TO WATCHED> и <ADD TO QUEUE> для МОДАЛКИ\n  // addIventListenerModalBtn(); //! НЕ СЮДА!!!\n}\n\n//! --------------------------------------------------------------------------------------------\n//*   Ф-ция, к-рая создает новую разметку ОДНОГО фильма в МОДАЛКЕ:\nfunction createInfoMovieMarkup(infoFilm) {\n  // console.log(\"createInfoMovieMarkup ==> infoFilm:\", infoFilm); //!\n  const {\n    id,\n    poster_path,\n    title,\n    name,\n    vote_average,\n    vote_count,\n    popularity,\n    original_title,\n    original_name,\n    genres,\n    overview,\n  } = infoFilm;\n\n  //? Получаем строку со всеми жанрами\n  const genresAllOneFilm = genres.map(item => item.name).join(', ');\n\n  //? Делаем заглавныее буквы в названии фильма (пока НЕ РАБОТАЕТ capitalsName)\n  let capitalsTitle = title;\n  if (title) {\n    capitalsTitle = title.toUpperCase();\n    // const title = title.toUpperCase();\n    // console.log(\"capitalsTitle:\", capitalsTitle); //!\n  }\n\n  let capitalsName = name;\n  if (name) {\n    const capitalsName = name.toUpperCase(); //!!! тут ошибка сделана СПЕЦИАЛЬНО!!!\n    // const name = name.toUpperCase();\n    // console.log(\"capitalsName:\", capitalsName); //!\n  }\n\n  return `\n        <img src=\"https://image.tmdb.org/t/p/w300${poster_path}\" alt=\"${\n    title || name\n  }\" />\n        \n        <div class=\"modal-сontent\">\n            <h3 class=\"modal-title-film\">${capitalsTitle || capitalsName}</h3\n            <table class=\"modal-info\">\n                <tbody>\n                    <tr>\n                        <td class=\"modal-key\">Vote/Votes</td>\n                        <td class=\"modal-parametr\"><span class=\"modal-parametr-vote\">${vote_average}</span> / ${vote_count}</td>\n                    </tr>\n                    <tr>\n                        <td class=\"modal-key\">Popularity</td>\n                        <td class=\"modal-parametr\">${popularity}</td>\n                    </tr>\n                    <tr>\n                        <td class=\"modal-key\">Original Title</td>\n                        <td class=\"modal-parametr\">${\n                          original_title || original_name\n                        }</td>\n                    </tr>\n                    <tr>\n                        <td class=\"modal-key\">Genre</td>\n                        <td class=\"modal-parametr\">${genresAllOneFilm}</td>\n                    </tr>\n                </tbody>\n            </table\n            <div class=\"modal-about-film\">\n                <h5 class=\"modal-about-title\">ABOUT</h5>\n                <span class=\"modal-about-text\">${overview}</span>\n            </div\n        \n            <div class=\"modal-button\" data-action=\"library-btn\">\n                <button \n                    type=\"button\" \n                    class=\"modal-watched\" \n                    data-action=\"modal-add-watched\"\n                    >\n                    ADD TO WATCHED\n                </button>\n                <button \n                    type=\"button\" \n                    class=\"modal-queue\" \n                    data-action=\"modal-add-queue\"\n                    >\n                    ADD TO QUEUE\n                </button>\n            </div>\n        </div>\n    `;\n}\n\n// --KHARLAMOVA TETIANA----------------МОДАЛЬНЕ ВІКНО З КОМАНДОЮ----------------------------------\n(() => {\n  const refsModalTeam = {\n    openModalTeamLink: document.querySelector('.team-link'),\n    closeModalTeamBtn: document.querySelector('.team-close-btn'),\n    modalTeam: document.querySelector('.backdrop-team'),\n    body: document.querySelector('body'),\n  };\n  const { openModalTeamLink, closeModalTeamBtn, modalTeam, body } =\n    refsModalTeam;\n  openModalTeamLink.addEventListener('click', onOpenModalTeam);\n  closeModalTeamBtn.addEventListener('click', onCloseModalTeam);\n  modalTeam.addEventListener('click', onBackdropTeamClick);\n\n  function onCloseModalTeam(e) {\n    modalTeam.classList.toggle('is-hidden');\n    body.classList.toggle('no-scroll');\n    window.removeEventListener('keydown', onEscKeyPress);\n  }\n\n  function onOpenModalTeam(e) {\n    window.addEventListener('keydown', onEscKeyPress);\n    modalTeam.classList.toggle('is-hidden');\n    body.classList.toggle('no-scroll');\n  }\n  function onEscKeyPress(e) {\n    if (e.key === 'Escape') {\n      onCloseModalTeam();\n    }\n  }\n\n  function onBackdropTeamClick(e) {\n    if (e.currentTarget === e.target) {\n      onCloseModalTeam();\n    }\n  }\n})();\n// -----------------------END OF МОДАЛЬНЕ ВІКНО З КОМАНДОЮ----------------------------\n"],"names":["$eWCmQ","parcelRequire","$fc8e7c71b3b7ed96$var$refs","moviesCards","document","querySelector","InfoMovie","homeBtn","filmotekaBtn","myLibraryBtn","movieDetails","closeModalBtn","backdrop","resultNotSuccessful","watchedQueueHeader","watchedHeader","queueHeader","addEventListener","$fc8e7c71b3b7ed96$var$onMyLibraryWatched","async","event","console","log","target","closest","itemId","$fc8e7c71b3b7ed96$var$idFilms","Number","getAttribute","$3oXzi","default","startSpinner","results","themoviedbApiService","getMovieDetails","$fc8e7c71b3b7ed96$var$clearModalContainer","$fc8e7c71b3b7ed96$var$infoFilm","error","removeSpinner","$parcel$interopDefault","Notify","failure","message","timeout","window","$fc8e7c71b3b7ed96$var$onEscKeyPress","body","classList","add","infoFilm1","insertAdjacentHTML","infoFilm2","id","poster_path","title","name","vote_average","vote_count","popularity","original_title","original_name","genres","overview","genresAllOneFilm","map","item","join","capitalsTitle","toUpperCase","capitalsName","$fc8e7c71b3b7ed96$var$createInfoMovieMarkup","watchedModal","queueModal","$fc8e7c71b3b7ed96$var$onWatchedModal","$fc8e7c71b3b7ed96$var$onQueueModal","textContent","contains","remove","$fc8e7c71b3b7ed96$var$currentPage","$fc8e7c71b3b7ed96$var$operationLogicWatchedQueue","$fc8e7c71b3b7ed96$var$onCloseModal","currentTarget","$fc8e7c71b3b7ed96$var$clearMovieContainer","JSON","parse","localStorage","getItem","$fc8e7c71b3b7ed96$var$appendWatchedQueueMarkup","$fc8e7c71b3b7ed96$var$localStorageWatched","$fc8e7c71b3b7ed96$var$localStorageQueue","textWatchedModal","find","option","warning","setItem","stringify","success","filter","info","textQueuedModal","innerHTML","removeEventListener","code","first_air_date","release_date","yearDate","substr","voteAverage","toFixed","$fc8e7c71b3b7ed96$var$createWatchedQueueCardsMarkup","refsModalTeam","openModalTeamLink","closeModalTeamBtn","modalTeam","onCloseModalTeam","e","toggle","onEscKeyPress1","key"],"version":3,"file":"my-library.fe80c350.js.map"}